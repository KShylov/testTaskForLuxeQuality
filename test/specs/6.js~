import { assert } from 'chai'
import LoginPage from '../pageobjects/login.page.js'
import InventoryPage from "../pageobjects/inventory.page.js";
import {JsonReader} from "../../utils/JsonReader.js";
import {filePathResolver} from "../../utils/FilePathResolver.js";

describe('Products', () => {
    const filePath = filePathResolver.getFilePath('testData.json');
    const testData = JsonReader.readJson(filePath);

    before(async () => {
        await LoginPage.open();
        await LoginPage.login(testData.users.standard_user, testData.password);
    })

    let inputData = [
        {
            elements: "cardTitles",
            nameMethod: "getExpectedSortTitles",
            selector: "Name (Z to A)",
            sortColback: true
        },
        {
            elements: "cardTitles",
            nameMethod: "getExpectedSortTitles",
            selector: "Name (A to Z)",
            sortColback: false
        },
        {
            elements: "priceElements",
            nameMethod: "getExpectedSortPrices",
            selector: "Price (high to low)",
            sortColback: (a, b) => b - a
        },
        {
            elements: "priceElements",
            nameMethod: "getExpectedSortPrices",
            selector: "Price (low to high)",
            sortColback: (a, b) => a - b
        }
    ]
    for (const data of inputData) {
        it(data.selector, async () => {
            console.log("step1 Choose one of the sorting options");
            const expectedPrices = await InventoryPage[data.nameMethod](data.sortColback);
            let funnelEl = await InventoryPage.funnel;
            await funnelEl.click();
            await funnelEl.selectByVisibleText(data.selector);
            let actualPrices = await InventoryPage[data.elements].map(el => el.getText());
            await assert.deepEqual(actualPrices, expectedPrices, "All products was sorted due choosed sorting");
        })
    }
})

