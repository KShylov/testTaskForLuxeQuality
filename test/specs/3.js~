import { assert } from 'chai'
import LoginPage from '../pageobjects/login.page.js'
import {JsonReader} from "../../utils/JsonReader.js";
import {filePathResolver} from "../../utils/FilePathResolver.js";

describe('Login', () => {

    before(async () => {
        await LoginPage.open();
    })

    it('Login with invalid login', async () => {
        const filePath = filePathResolver.getFilePath('testData.json');
        const testData = JsonReader.readJson(filePath);

        console.log("step1 Enter invalid login into \"Login\" field")
        await LoginPage.inputUsername.setValue('invalidLogin');
        const actualDataStep1 = await LoginPage.inputUsername.getValue();
        await assert.equal(actualDataStep1, 'invalidLogin', "The input data does not match the received data.");

        console.log("step2 Enter valid password into \"Password\" field")
        await LoginPage.inputPassword.setValue('invalidPassword');
        const actualDataStep2 = await LoginPage.inputPassword.getValue();
        await assert.notEqual(actualDataStep2, '', "Password field is empty");
        const type = await LoginPage.inputPassword.getAttribute('type');
        await assert.equal(type, 'password', "Password is not hidden");

        console.log("step3 Click \"Login\" button\n")
        await LoginPage.btnSubmit.click();
        let userIconX = await LoginPage.usernameErrorIcon.getAttribute("class");
        await assert.include(userIconX, 'error_icon', "The icon is not displayed");
        let passwordIconX = await LoginPage.passwordErrorIcon.getAttribute("class");
        await assert.include(passwordIconX, 'error_icon', "The icon is not displayed");
        const userHighlightedWithRed = await LoginPage.inputUsername.getAttribute('class');
        await assert.include(userHighlightedWithRed, 'error', "The input is not highlighted with red");
        const passwordHighlightedWithRed = await LoginPage.inputPassword.getAttribute('class');
        await assert.include(passwordHighlightedWithRed, 'error', "The input is not highlighted with red");
        const errorMessage = await LoginPage.redMessage.getText();
        await assert.equal(errorMessage, testData.expectedError, "The error message is not displayed");
    })
})

